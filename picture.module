<?php

use \Drupal\picture\PictureMapping;
use \Drupal\Core\Template\Attribute;

define('PICTURE_CLASS', 'resp-img-picture');

/**
 * Implements hook_permission().
 */
function picture_permission() {
  return array(
    'administer pictures' => array(
      'title' => t('Administer Pictures'),
      'description' => t('Administer Pictures'),
    ),
  );
}

/**
 * Implements hook_menu().
 */
function picture_menu() {
  $items = array();

  $items['admin/config/media/picturemapping'] = array(
    'title' => 'Picture Mappings',
    'description' => 'Manage picture mappings',
    'access arguments' => array('administer pictures'),
    'weight' => 10,
    'page callback' => 'picture_mapping_page',
    'file' => 'picture_mapping.admin.inc',
  );
  $items['admin/config/media/picturemapping/add'] = array(
    'title' => 'Add picture mapping',
    'page callback' => 'picture_mapping_page_add',
    'access callback' => 'user_access',
    'access arguments' => array('administer pictures'),
    'type' => MENU_LOCAL_ACTION,
    'file' => 'picture_mapping.admin.inc',
  );
  $items['admin/config/media/picturemapping/%picture_mapping/edit'] = array(
    'title' => 'Edit picture mapping',
    'page callback' => 'picture_mapping_page_edit',
    'page arguments' => array(4),
    'access callback' => 'user_access',
    'access arguments' => array('administer pictures'),
    'file' => 'picture_mapping.admin.inc',
  );
  $items['admin/config/media/picturemapping/%picture_mapping/duplicate'] = array(
    'title' => 'Duplicate picture mapping',
    'page callback' => 'picture_mapping_page_duplicate',
    'page arguments' => array(4),
    'access callback' => 'user_access',
    'access arguments' => array('administer pictures'),
    'file' => 'picture_mapping.admin.inc',
  );
  $items['admin/config/media/picturemapping/%picture_mapping/delete'] = array(
    'title' => 'Delete',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('picture_mapping_action_confirm', 4, 5),
    'access callback' => 'user_access',
    'access arguments' => array('administer pictures'),
    'file' => 'picture_mapping.admin.inc',
  );

  return $items;
}

/**
 * Implements hook_entity_info().
 */
function picture_entity_info() {
  $types['picture_mapping'] = array(
    'label' => 'Picture mapping',
    'entity class' => 'Drupal\picture\PictureMapping',
    'controller class' => 'Drupal\Core\Config\Entity\ConfigStorageController',
    'config prefix' => 'picture.mappings',
    'entity keys' => array(
      'id' => 'id',
      'label' => 'label',
      'uuid' => 'uuid',
    ),
    'form controller class' => array(
      'default' => 'Drupal\picture\PictureMappingFormController',
      'add' => 'Drupal\picture\PictureMappingFormController',
      'duplicate' => 'Drupal\picture\PictureMappingFormController',
    ),
    'list controller class' => 'Drupal\picture\PictureMappingListController',
    'list path' => 'admin/config/media/picturemapping',
    'uri callback' => 'picture_mapping_uri',
  );

  return $types;
}

/**
 * Implements hook_library_info().
 */
function picture_library_info() {
  $libraries['matchmedia'] = array(
    'title' => t('Matchmedia'),
    'website' => 'https://github.com/attiks/picturefill-proposal',
    'version' => '0.1',
    'js' => array(
      drupal_get_path('module', 'picture') . '/picturefill/matchmedia.js' => array('type' => 'file', 'weight' => -10, 'group' => JS_DEFAULT),
    ),
  );
  $libraries['picturefill'] = array(
    'title' => t('Picturefill'),
    'website' => 'https://github.com/attiks/picturefill-proposal',
    'version' => '0.1',
    'js' => array(
      drupal_get_path('module', 'picture') . '/picturefill/picturefill.js' => array('type' => 'file', 'weight' => -10, 'group' => JS_DEFAULT),
    ),
  );
  return $libraries;
}

/**
 * Load one picture by its identifier.
 *
 * @param int $id
 *   The id of the picture mapping to load.
 *
 * @return Drupal\picture\Picture
 *   The entity object, or FALSE if there is no entity with the given id.
 *
 * @todo Needed for menu_callback
 *
 * @see http://drupal.org/node/1798214
 *
 */
function picture_mapping_load($id) {
  return entity_load('picture_mapping', $id);
}

/**
 * Picture uri callback.
 */
function picture_mapping_uri(PictureMapping $picture_mapping) {
  return array(
    'path' => 'admin/config/media/picturemapping/' . $picture_mapping->id(),
  );
}

/**
 * Picture uri callback.
 */
function picture_mapping_set_uri(PictureMapping $picture_mapping) {
  return array(
    'path' => 'admin/config/media/picturemapping/' . $picture_mapping->id(),
  );
}

/**
 * Implements hook_theme().
 */
function picture_theme() {
  return array(
    'picture' => array(
      'variables' => array(
        'style_name' => NULL,
        'path' => NULL,
        'width' => NULL,
        'height' => NULL,
        'alt' => '',
        'title' => NULL,
        'attributes' => array(),
        'breakpoints' => array(),
      ),
    ),
    'picture_formatter' => array(
      'variables' => array(
        'item' => NULL,
        'path' => NULL,
        'image_style' => NULL,
        'breakpoints' => array(),
      ),
    ),
    'picture_source' => array(
      'variables' => array(
        'src' => NULL,
        'srcset' => NULL,
        'dimension' => NULL,
        'media' => NULL,
      ),
    ),
  );
}

/**
 * Implements hook_field_formatter_info().
 */
function picture_field_formatter_info() {
  $formatters = array(
    'picture' => array(
      'label' => t('Picture'),
      'field types' => array('image'),
      'settings' => array('picture_mapping' => '', 'fallback_image_style' => '', 'image_link' => ''),
    ),
  );

  return $formatters;
}

/**
 * Implements hook_field_formatter_settings_form().
 */
function picture_field_formatter_settings_form($field, $instance, $view_mode, $form, &$form_state) {
  $display = $instance['display'][$view_mode];
  $settings = $display['settings'];

  $picture_options = array();
  $picture_mappings = entity_load_multiple('picture_mapping');
  if ($picture_mappings && !empty($picture_mappings)) {
    foreach ($picture_mappings as $machine_name => $picture_mapping) {
      $picture_options[$machine_name] = $picture_mapping->label();
    }
  }

  $element['picture_mapping'] = array(
    '#title' => t('Picture mapping'),
    '#type' => 'select',
    '#default_value' => $settings['picture_mapping'],
    '#required' => TRUE,
    '#options' => $picture_options,
  );

  $image_styles = image_style_options(FALSE);
  $element['fallback_image_style'] = array(
    '#title' => t('Fallback image style'),
    '#type' => 'select',
    '#default_value' => $settings['fallback_image_style'],
    '#empty_option' => t('Automatic'),
    '#options' => $image_styles,
  );

  $link_types = array(
    'content' => t('Content'),
    'file' => t('File'),
  );
  $element['image_link'] = array(
    '#title' => t('Link image to'),
    '#type' => 'select',
    '#default_value' => $settings['image_link'],
    '#empty_option' => t('Nothing'),
    '#options' => $link_types,
  );

  return $element;
}

/**
 * Implements hook_field_formatter_settings_summary().
 */
function picture_field_formatter_settings_summary($field, $instance, $view_mode) {
  $display = $instance['display'][$view_mode];
  $settings = $display['settings'];

  $summary = array();

  $picture_mapping = entity_load('picture_mapping', $settings['picture_mapping']);
  if ($picture_mapping) {
    $summary[] = t('Picture mapping: @picture_mapping', array('@picture_mapping' => $picture_mapping->label()));
  }
  else {
    $summary[] = t("Picture mapping doesn't exists");
  }

  $image_styles = image_style_options(FALSE);
  unset($image_styles['']);
  if (isset($image_styles[$settings['fallback_image_style']])) {
    $summary[] = t('Fallback Image style: @style', array('@style' => $image_styles[$settings['fallback_image_style']]));
  }
  else {
    $summary[] = t('Automatic fallback');
  }

  $link_types = array(
    'content' => t('Linked to content'),
    'file' => t('Linked to file'),
  );
  // Display this setting only if image is linked.
  if (isset($link_types[$settings['image_link']])) {
    $summary[] = $link_types[$settings['image_link']];
  }

  return implode('<br />', $summary);
}

/**
 * Implements hook_field_formatter_view().
 */
function picture_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  $element = array();
  // Check if the formatter involves a link.
  if ($display['settings']['image_link'] == 'content') {
    $uri = $entity->uri();
  }
  elseif ($display['settings']['image_link'] == 'file') {
    $link_file = TRUE;
  }

  $breakpoint_styles = array();
  $fallback_image_style = '';
  $picture_mapping = entity_load('picture_mapping', $display['settings']['picture_mapping']);
  if ($picture_mapping) {
    foreach ($picture_mapping->mappings as $breakpoint_name => $multipliers) {
      if (!empty($multipliers)) {
        foreach ($multipliers as $multiplier => $image_style) {
          if (!empty($image_style)) {
            if (empty($fallback_image_style)) {
              $fallback_image_style = $image_style;
            }
            if (!isset($breakpoint_styles[$breakpoint_name])) {
              $breakpoint_styles[$breakpoint_name] = array();
            }
            $breakpoint_styles[$breakpoint_name][$multiplier] = $image_style;
          }
        }
      }
    }
  }

  if (isset($display['settings']['fallback_image_style']) && !empty($display['settings']['fallback_image_style'])) {
    $fallback_image_style = $display['settings']['fallback_image_style'];
  }

  foreach ($items as $delta => $item) {
    if (isset($link_file)) {
      $uri = array(
        'path' => file_create_url($item['uri']),
        'options' => array(),
      );
    }
    $element[$delta] = array(
      '#theme' => 'picture_formatter',
      '#attached' => array('library' => array(
        array('picture', 'matchmedia'),
        array('picture', 'picturefill'),
      )),
      '#item' => $item,
      '#image_style' => $fallback_image_style,
      '#breakpoints' => $breakpoint_styles,
      '#path' => isset($uri) ? $uri : '',
    );
  }

  return $element;
}

function theme_picture_formatter($variables) {
  if (!isset($variables['breakpoints']) || empty($variables['breakpoints'])) {
    return theme('image_formatter', $variables);
  }

  $item = $variables['item'];

  // Do not output an empty 'title' attribute.
  if (isset($item['title']) && drupal_strlen($item['title']) == 0) {
    unset($item['title']);
  }

  $item['style_name'] = $variables['image_style'];
  $item['breakpoints'] = $variables['breakpoints'];

  if (!isset($item['path']) && isset($variables['uri'])) {
    $item['path'] = $variables['uri'];
  }
  $output = theme('picture', $item);

  if (isset($variables['path']['path'])) {
    $path = $variables['path']['path'];
    $options = isset($variables['path']['options']) ? $variables['path']['options'] : array();
    $options['html'] = TRUE;
    $output = l($output, $path, $options);
  }
  return $output;
}

/**
 * Theme a picture element.
 */
function theme_picture($variables) {
  // Make sure that width and height are proper values
  // If they exists we'll output them
  // @see http://www.w3.org/community/respimg/2012/06/18/florians-compromise/
  if (isset($variables['width']) && empty($variables['width'])) {
    unset($variables['width']);
    unset($variables['height']);
  }
  elseif (isset($variables['height']) && empty($variables['height'])) {
    unset($variables['width']);
    unset($variables['height']);
  }

  $sources = array();
  $output = array();

  // Fallback image, output as source with media query.
  $sources[] = array(
    'src' => image_style_url($variables['style_name'], $variables['uri']),
    'dimensions' => picture_get_image_dimensions($variables),
  );

  // All breakpoints and multipliers.
  foreach ($variables['breakpoints'] as $breakpoint_name => $multipliers) {
    $breakpoint = breakpoint_load($breakpoint_name);
    if ($breakpoint) {
      $new_sources = array();
      foreach ($multipliers as $multiplier => $image_style) {
        $new_source = $variables;
        $new_source['style_name'] = $image_style;
        $new_source['#multiplier'] = $multiplier;
        $new_sources[] = $new_source;
      }

      // Only one image, use src.
      if (count($new_sources) == 1) {
        $sources[] = array(
          'src' => image_style_url($new_sources[0]['style_name'], $new_sources[0]['uri']),
          'dimensions' => picture_get_image_dimensions($new_sources[0]),
          'media' => $breakpoint->mediaQuery,
        );
      }
      else {
        // Mutliple images, use srcset.
        $srcset = array();
        foreach ($new_sources as $new_source) {
          $srcset[] = image_style_url($new_source['style_name'], $new_source['uri']) . ' ' . $new_source['#multiplier'];
        }
        $sources[] = array(
          'srcset' => implode(', ', $srcset),
          'dimensions' => picture_get_image_dimensions($new_sources[0]),
          'media' => $breakpoint->mediaQuery,
        );
      }
    }
  }

  if (!empty($sources)) {
    $attributes = array();
    foreach (array('alt', 'title') as $key) {
      if (isset($variables[$key])) {
        $attributes[$key] = $variables[$key];
      }
    }
    $output[] = '<picture' . new Attribute($attributes) . '>';

    // add source tags to the output.
    foreach ($sources as $source) {
      $output[] = theme('picture_source', $source);
    }

    // output the fallback image.
    $output[] = '<noscript>' . theme('image_style', $variables) . '</noscript>';
    $output[] = '</picture>';
    return implode("\n", $output);
  }
}

function theme_picture_source($variables) {
  $output = array();
  if (isset($variables['media']) && !empty($variables['media'])) {
    if (!isset($variables['srcset'])) {
      $output[] = '<!-- <source media="' . $variables['media'] . '" src="' . $variables['src'] . '" ' . new Attribute($variables['dimensions']) . ' /> -->';
      $output[] = '<source media="' . $variables['media'] . '" src="' . $variables['src'] . '" ' . new Attribute($variables['dimensions']) . '/>';
    }
    elseif (!isset($variables['src'])) {
      $output[] = '<!-- <source media="' . $variables['media'] . '" srcset="' . $variables['srcset'] . '" ' . new Attribute($variables['dimensions']) . ' /> -->';
      $output[] = '<source media="' . $variables['media'] . '" srcset="' . $variables['srcset'] . '" ' . new Attribute($variables['dimensions']) . ' />';
    }
  }
  else {
    $output[] = '<!-- <source src="' . $variables['src'] . '" ' . new Attribute($variables['dimensions']) . ' /> -->';
    $output[] = '<source src="' . $variables['src'] . '" ' . new Attribute($variables['dimensions']) . '/>';
  }
  return implode("\n", $output);
}

function picture_get_image_dimensions($variables) {
  // Determine the dimensions of the styled image.
  $dimensions = array(
    'width' => $variables['width'],
    'height' => $variables['height'],
  );

  image_style_transform_dimensions($variables['style_name'], $dimensions);

  return $dimensions;
}
